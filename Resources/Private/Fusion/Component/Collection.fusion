prototype(Breadlesscode.Listable:Collection) < prototype(Neos.Fusion:Component) {
    collection = ${ [] }
    currentPage = ${ 1 }
    limit = ${ 15 }
    paginate = ${ false }

    @context.limit = ${this.limit}
    @context.offset = ${(this.currentPage - 1) * this.limit}

    renderer = Neos.Fusion:Case {
        # elastic search pagination implementation
        elasticSearch {
            condition = ${ Type.instance(props.collection, 'Flowpack\ElasticSearch\ContentRepositoryAdaptor\Eel\ElasticSearchQueryBuilder') }
            renderer = ${ props.collection }
            renderer.@process {
                limitAndOffset = ${ value.limit(limit).from(offset) }
                limitAndOffset.@if.isPaginated = ${ props.paginate }

                limits = ${ value.limit(limit) }
                limits.@if.isNotPaginated = ${ !props.paginate && limit >= 1  }

                execute = ${ value }
                executee = ${ value.execute() }
            }
        }
        # default flow query and array implementaion
        default {
            condition = ${ true }
            renderer = ${ Type.instance(props.collection, 'Neos\Eel\FlowQuery\FlowQuery') ? props.collection : q(props.collection) }
            renderer.@process {
                slice = ${ value.slice(offset, limit) }
                slice.@if.isPaginated = ${ props.paginate }

                limits = ${ value.slice(0, limit) }
                limits.@if.isNotPaginated = ${ !props.paginate && limit >= 1  }

                execute = ${ value.get() }
            }
        }
    }
}
